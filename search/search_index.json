{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Solid Web Monetization \u00b6 The Solid decentralization effort decouples data from services, so that users are in full control over their personal data. Since services cannot primarily depend on data collection as a primary business model anymore, alternative forms of monetization, such as micropayments via Web Monetization are essential for incentivizing application development . This project is funded by Grant for the Web , and runs from May 2021 for 6 months until (and including) October 2021. All progress will happen publicly via this repository. The project was extended until (and including) January 2022. Goals \u00b6 Enable monetization of Solid applications : Solid applications will be able to include a payment pointer that can be discovered and used by the Solid authentication logic or by user agents. This involves the creation of a prototype monetized Solid application. Allow Solid identities to be linked to Web Monetization wallets : Solid users will optionally be able to configure a Web Monetization wallet that will be used to perform payments when they log into and use monetized Solid applications. This involves the development of a user configuration application in which Solid users can link a Web Monetization wallet to their identity. Incorporate payment processing into Solid\u2019s authentication : Once a user has logged into an monetized Solid application, payments will be performed from the user\u2019s wallet as long as the application is being used. This involves developing an extension of the Solid authentication library that implements the Web Monetization protocol. Intended outcomes \u00b6 Application to configure a Web Monetization wallet into a Solid identity docs | code Extension of the Solid authentication library with Web Monetization support spec | library docs | library code Prototypical Web Monetized Solid application docs | code Documentation and tutorials for Solid users to configure a Web Monetization wallet practical docs | technical docs | local demo Documentation and tutorials for application developers to monetize their application practical docs | technical docs | local demo Dissemination of the main results and findings of this project dissemination Public demos \u00b6 Solid Accountant : configure Web Monetization wallet into a Solid identity. Solid MicroStore : prototypical Web Monetized Solid application. Solid WMP : Web Monetization Provider with a fake currency. Public reports \u00b6 Interim report Final report","title":"Home"},{"location":"#solid-web-monetization","text":"The Solid decentralization effort decouples data from services, so that users are in full control over their personal data. Since services cannot primarily depend on data collection as a primary business model anymore, alternative forms of monetization, such as micropayments via Web Monetization are essential for incentivizing application development . This project is funded by Grant for the Web , and runs from May 2021 for 6 months until (and including) October 2021. All progress will happen publicly via this repository. The project was extended until (and including) January 2022.","title":"Solid Web Monetization"},{"location":"#goals","text":"Enable monetization of Solid applications : Solid applications will be able to include a payment pointer that can be discovered and used by the Solid authentication logic or by user agents. This involves the creation of a prototype monetized Solid application. Allow Solid identities to be linked to Web Monetization wallets : Solid users will optionally be able to configure a Web Monetization wallet that will be used to perform payments when they log into and use monetized Solid applications. This involves the development of a user configuration application in which Solid users can link a Web Monetization wallet to their identity. Incorporate payment processing into Solid\u2019s authentication : Once a user has logged into an monetized Solid application, payments will be performed from the user\u2019s wallet as long as the application is being used. This involves developing an extension of the Solid authentication library that implements the Web Monetization protocol.","title":"Goals"},{"location":"#intended-outcomes","text":"Application to configure a Web Monetization wallet into a Solid identity docs | code Extension of the Solid authentication library with Web Monetization support spec | library docs | library code Prototypical Web Monetized Solid application docs | code Documentation and tutorials for Solid users to configure a Web Monetization wallet practical docs | technical docs | local demo Documentation and tutorials for application developers to monetize their application practical docs | technical docs | local demo Dissemination of the main results and findings of this project dissemination","title":"Intended outcomes"},{"location":"#public-demos","text":"Solid Accountant : configure Web Monetization wallet into a Solid identity. Solid MicroStore : prototypical Web Monetized Solid application. Solid WMP : Web Monetization Provider with a fake currency.","title":"Public demos"},{"location":"#public-reports","text":"Interim report Final report","title":"Public reports"},{"location":"accountant/","text":"Solid Accountant \u00b6 The Accountant application is an example of a simple app that allows you to authenticate with your Solid pod and store payment pointer information in it.","title":"Solid Accountant"},{"location":"accountant/#solid-accountant","text":"The Accountant application is an example of a simple app that allows you to authenticate with your Solid pod and store payment pointer information in it.","title":"Solid Accountant"},{"location":"accountant/practical/","text":"Solid Accountant - Practical \u00b6 Purpose \u00b6 The purpose of this application is to demonstrate storing a payment pointer in the WebID of the user. This payment pointer can then be used to initiate payments to the WMP as mandated by the subscription sanctioned by the user. Usage \u00b6 To use the application you are required to log in to a Solid pod . Once authenticated with your WebID, open the subpage Payment pointers . This will present you with a table that contains all your stored payment pointers (read from your WebID). From here you can add or remove payment pointers as you see fit. Docker \u00b6 The Accountant application can be started via Docker Compose: Clone the repository: git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization Open the root repository folder, where the docker-compose.yml file is located: cd solid-web-monetization Execute docker-compose up -d Browse to http://wallet.localhost Login \u00b6 Although this application has support for different solid pod providers, the other applications only support solidcommunity.net pods. That is why you should create a solid pod over at solidcommunity.net to carry on. The other supported identity providers for this application are: inrupt.net custom url (self hosted on pc) Paymentpointers \u00b6 Payment Pointers are a standardized identifier for payment accounts. In the same way that an email address provides an identifier for a mailbox in the email ecosystem, a payment pointer is used by an account holder to share the details of their account with a counter-party. [ source ] Payment pointers can be resolved to a (https scheme) URL. Under that URL Open Payments endpoints can be discovered. They allow for payments to be received or initiated to the owner of said payment pointer. Your WebID \u00b6 A WebID is a unique identifier used to identify a specific user. An example of what a WebID could look like is: https://fulano.pod.provider/profile/card#me . To share data with a third party, a user associates sharing preferences to the WebID of that third party. [ source ] The content of your WebID is typically stored in RDF and thus must be written to in RDF . This is exactly what this application demonstrates. (See technical... )","title":"Practical"},{"location":"accountant/practical/#solid-accountant-practical","text":"","title":"Solid Accountant - Practical"},{"location":"accountant/practical/#purpose","text":"The purpose of this application is to demonstrate storing a payment pointer in the WebID of the user. This payment pointer can then be used to initiate payments to the WMP as mandated by the subscription sanctioned by the user.","title":"Purpose"},{"location":"accountant/practical/#usage","text":"To use the application you are required to log in to a Solid pod . Once authenticated with your WebID, open the subpage Payment pointers . This will present you with a table that contains all your stored payment pointers (read from your WebID). From here you can add or remove payment pointers as you see fit.","title":"Usage"},{"location":"accountant/practical/#docker","text":"The Accountant application can be started via Docker Compose: Clone the repository: git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization Open the root repository folder, where the docker-compose.yml file is located: cd solid-web-monetization Execute docker-compose up -d Browse to http://wallet.localhost","title":"Docker"},{"location":"accountant/practical/#login","text":"Although this application has support for different solid pod providers, the other applications only support solidcommunity.net pods. That is why you should create a solid pod over at solidcommunity.net to carry on. The other supported identity providers for this application are: inrupt.net custom url (self hosted on pc)","title":"Login"},{"location":"accountant/practical/#paymentpointers","text":"Payment Pointers are a standardized identifier for payment accounts. In the same way that an email address provides an identifier for a mailbox in the email ecosystem, a payment pointer is used by an account holder to share the details of their account with a counter-party. [ source ] Payment pointers can be resolved to a (https scheme) URL. Under that URL Open Payments endpoints can be discovered. They allow for payments to be received or initiated to the owner of said payment pointer.","title":"Paymentpointers"},{"location":"accountant/practical/#your-webid","text":"A WebID is a unique identifier used to identify a specific user. An example of what a WebID could look like is: https://fulano.pod.provider/profile/card#me . To share data with a third party, a user associates sharing preferences to the WebID of that third party. [ source ] The content of your WebID is typically stored in RDF and thus must be written to in RDF . This is exactly what this application demonstrates. (See technical... )","title":"Your WebID"},{"location":"accountant/technical/","text":"Solid Accountant - Technical \u00b6 This information is meant for developers looking at the code of the Accountant application. Stack \u00b6 Framework \u00b6 The application is written in Angular 13.x.x and thus in TypeScript . It is written as a browser application. Package manager \u00b6 The yarn package manager was used. It behaves very similar to npm but is a bit faster and more modern in use. To install all libraries and build the code: run yarn from the project folder /solid-accountant . To run the code in a development server: execute yarn start from the project folder /solid-accountant . Libraries \u00b6 The noteworthy libraries used and the reason for doing so are listed below: library reason npm link n3 Implementation of the RDF .js low-level specification that lets you handle RDF . https://www.npmjs.com/package/n3 @inrupt/solid-client-authn-browser Authenticate web apps (in the browser) with Solid identity servers. https://www.npmjs.com/package/@inrupt/solid-client-authn-browser @inrupt/vocab-common-rdf Bundle of common RDF vocabularies. https://www.npmjs.com/package/@inrupt/vocab-common-rdf Code notes \u00b6 Pages \u00b6 Angular works with components. Each subpage is a Component , as such the following folders contain the component for those subpages: /src/app/home : Home page /src/app/pp : Payment pointers page /src/app/about : About page /src/app/auth : Login page Nothing special happens in the code for these pages. The code and HTML should speak for itself. Other components \u00b6 The leftover components are used as custom HTML Elements in the HTML. A component has HTML, CSS and code (typescript) associated with it. You can use a component in HTML by using an HTML tag to refer to it. <!-- Example tag --> < app-login-btn [ provider ]=\" p \" ></ app-login-btn > Login button \u00b6 /src/app/components/login-btn This component is used for the login boxes on the login page with a logo of the IDP . Services \u00b6 Services are singleton instances that are dependency injected into the components that list them as argument of their constructors. SolidService \u00b6 /src/app/services/solid.service.ts This service contains the code to read from, parse and write to the WebID document on the solid pod of the user. It mainly uses the n3 library to read/write the solid WebID profile. The code itself is documented. App routing \u00b6 All app routing paths can be fouind in /src/app/app-routing.modules.ts WebID Profile \u00b6 The WebID profile is stored in RDF . That means that data written to that profile should also be formatted in RDF . To store our PaymentPointers, the following RDF triples are written into that WebID profile: https://<my-username].solidcommunity.net/profile/card#me @prefix : <#>. ... @prefix n: <https://paymentpointers.org/ns#>. ... #me ... n:hasPaymentPointer :me-paymentpointer-1. :me-paymentpointer-1 a n:InterledgerPaymentPointer; n:paymentPointerValue \"$my.paymentpointer.value\". This was done by means of a SPARQL update PATCH request. (See here... )","title":"Technical"},{"location":"accountant/technical/#solid-accountant-technical","text":"This information is meant for developers looking at the code of the Accountant application.","title":"Solid Accountant - Technical"},{"location":"accountant/technical/#stack","text":"","title":"Stack"},{"location":"accountant/technical/#framework","text":"The application is written in Angular 13.x.x and thus in TypeScript . It is written as a browser application.","title":"Framework"},{"location":"accountant/technical/#package-manager","text":"The yarn package manager was used. It behaves very similar to npm but is a bit faster and more modern in use. To install all libraries and build the code: run yarn from the project folder /solid-accountant . To run the code in a development server: execute yarn start from the project folder /solid-accountant .","title":"Package manager"},{"location":"accountant/technical/#libraries","text":"The noteworthy libraries used and the reason for doing so are listed below: library reason npm link n3 Implementation of the RDF .js low-level specification that lets you handle RDF . https://www.npmjs.com/package/n3 @inrupt/solid-client-authn-browser Authenticate web apps (in the browser) with Solid identity servers. https://www.npmjs.com/package/@inrupt/solid-client-authn-browser @inrupt/vocab-common-rdf Bundle of common RDF vocabularies. https://www.npmjs.com/package/@inrupt/vocab-common-rdf","title":"Libraries"},{"location":"accountant/technical/#code-notes","text":"","title":"Code notes"},{"location":"accountant/technical/#pages","text":"Angular works with components. Each subpage is a Component , as such the following folders contain the component for those subpages: /src/app/home : Home page /src/app/pp : Payment pointers page /src/app/about : About page /src/app/auth : Login page Nothing special happens in the code for these pages. The code and HTML should speak for itself.","title":"Pages"},{"location":"accountant/technical/#other-components","text":"The leftover components are used as custom HTML Elements in the HTML. A component has HTML, CSS and code (typescript) associated with it. You can use a component in HTML by using an HTML tag to refer to it. <!-- Example tag --> < app-login-btn [ provider ]=\" p \" ></ app-login-btn >","title":"Other components"},{"location":"accountant/technical/#login-button","text":"/src/app/components/login-btn This component is used for the login boxes on the login page with a logo of the IDP .","title":"Login button"},{"location":"accountant/technical/#services","text":"Services are singleton instances that are dependency injected into the components that list them as argument of their constructors.","title":"Services"},{"location":"accountant/technical/#solidservice","text":"/src/app/services/solid.service.ts This service contains the code to read from, parse and write to the WebID document on the solid pod of the user. It mainly uses the n3 library to read/write the solid WebID profile. The code itself is documented.","title":"SolidService"},{"location":"accountant/technical/#app-routing","text":"All app routing paths can be fouind in /src/app/app-routing.modules.ts","title":"App routing"},{"location":"accountant/technical/#webid-profile","text":"The WebID profile is stored in RDF . That means that data written to that profile should also be formatted in RDF . To store our PaymentPointers, the following RDF triples are written into that WebID profile: https://<my-username].solidcommunity.net/profile/card#me @prefix : <#>. ... @prefix n: <https://paymentpointers.org/ns#>. ... #me ... n:hasPaymentPointer :me-paymentpointer-1. :me-paymentpointer-1 a n:InterledgerPaymentPointer; n:paymentPointerValue \"$my.paymentpointer.value\". This was done by means of a SPARQL update PATCH request. (See here... )","title":"WebID Profile"},{"location":"demo/intro/","text":"Demo introduction \u00b6 The results of this project were defined by several intended outcomes . A large contribution to these outcome manifests itself in the form of a working demonstrator. This section will act as a guide for this demo, as it consists of multiple separate components interacting to complete a scenario. Info This introduction and scenario will talk about the demonstrator that can be run locally on your machine. However there are also public hosted versions of these demo components, which you can find here: Solid Accountant : configure Web Monetization wallet into a Solid identity. Solid MicroStore : prototypical Web Monetized Solid application. Solid WMP : Web Monetization Provider with a fake currency. Purpose of the demo \u00b6 The demo hosts a couple of components, that come into play when a content-creator is hosting web monetized content that visiting users pay for through micropayments. These micropayments are sent over the interledger network from the visting users wallet to the content creators wallet. Aligning with Solid's vision, all required data is stored in the visiting user's Solid pod. Our demonstrator and the use of its various components is driven by the effort to further decentralize the web. The Web Monetization Provider component was introduced to further facilitate this decentralization. This demo will allow you to log in to your personal Solid pod and register a personal payment pointer . Afterwards you can subscribe to the Web Monetization Provider , that will manage micropayments on your behalf (with the chosen payment pointer ). The Microstore component can then be visited to showcase how (once logged in with your Solid WebID) the registered WMP can be requested from your Solid WebID and instructed to pay micropayments to the content provider's payment pointer embedded in the web page. Setup \u00b6 The whole demonstrator can be set up and executed locally. Prerequisites \u00b6 Docker \u00b6 You will need a working docker installation. We recommend installing Docker Desktop . It should also include a Docker Compose install. (which installs by default with Docker Desktop). Git \u00b6 A basic git installation will be required, just to be able to clone the repository on your local pc. Solid pod \u00b6 As a limitation of this demonstrator, not all components work with just any Solid pod. It is however not a technical limitation. To successfully go through the demonstrator, the user wil have to create an account and pod at solidcommunity.net . Running \u00b6 To run this setup, you just have to clone the repository locally and then execute the docker compose file from the cloned folder. git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization.git cd solid-web-monetization docker compose up -d This will start all demo components on your pc. Component URL Description Accountant http://wallet.localhost Allows you to edit your payment pointers stored in your WebID (on your Solid pod). Web Monetization Provider http://wmp.localhost Allows you to register the WMP in your WebID (on your Solid pod) and setup a subscription to pay the WMP . Microstore http://store.localhost Website of the content creator that has unlockable monetized content for users logged in with WebID. Docs http://docs.localhost These docs are also hosted locally on your pc now. Info If you want a more detailed explanation, you can follow the demo scenario . docker-compose.yml \u00b6 The docker-compose.yml file that is being used has quite a few services that are worth explaining: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 version : '3.9' services : # Docs service mkdocs : image : squidfunk/mkdocs-material container_name : mkdocs ports : - 8888:8000 volumes : - type : bind source : ./.docs target : /docs labels : - \"traefik.enable=true\" # Let traefik pick this up - \"traefik.http.routers.docs.rule=Host(`docs.localhost`)\" # Route docs.localhost - \"traefik.http.routers.docs.entrypoints=web\" # Accountant application wallet : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/accountant:latest pull_policy : always container_name : wallet labels : - \"traefik.enable=true\" # Let traefik pick this up - \"traefik.http.routers.wallet.rule=Host(`wallet.localhost`)\" # Route wallet.localhost - \"traefik.http.routers.wallet.entrypoints=web\" # Microstore application store : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/microstore:latest pull_policy : always container_name : store labels : - \"traefik.enable=true\" # Let traefik pick this up - \"traefik.http.routers.store.rule=Host(`store.localhost`)\" # Route store.localhost - \"traefik.http.routers.store.entrypoints=web\" environment : - \"PAYMENT_POINTER=$$rafiki.money/p/thomas.dupont@ugent.be\" # Paymentpointer of content creator - \"CONFIG_VARS=PAYMENT_POINTER\" # Variables to expose to the app - \"CONFIG_FILE_PATH=/app/assets\" # Path of the config file - \"CONFIG_FILE_NAME=config.json\" # Name of the config file # Web Monetization Provider wmp : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/wmp:latest pull_policy : always container_name : wmp expose : - \"8080\" labels : - \"traefik.enable=true\" # Let traefik pick this up - \"traefik.http.routers.wmp.rule=Host(`wmp.localhost`)\" # Route wmp.localhost - \"traefik.http.routers.wmp.entrypoints=web\" environment : - \"BASE_URI=http://wmp.localhost\" # Uri to register/write in the pod - \"MONGO_CONNECTION_STRING=mongodb://mongodb:27017\" # The database connection string - \"CLIENT_ID=79e3648fc184f70306e4072f3a856bb1\" # The client ID (see docs) - \"CLIENT_SECRET=2ba10ec24a3cb231ee39781bc3882d66\" # The client secret (see docs) # Backing database for the WMP mongodb : image : mongo:4.2 container_name : mongodb ports : - \"27017:27017\" volumes : - 'mongodb_data:/data/db' # Traefik proxy (allows for ***.localhost routing of components) traefik : image : \"traefik:v2.6\" container_name : \"traefik\" command : # - \"--log.level=DEBUG\" - \"--api.insecure=true\" - \"--providers.docker=true\" - \"--providers.docker.exposedbydefault=false\" - \"--entrypoints.web.address=:80\" ports : - \"80:80\" - \"8080:8080\" volumes : - \"/var/run/docker.sock:/var/run/docker.sock:ro\" volumes : mongodb_data : driver : local","title":"Introduction"},{"location":"demo/intro/#demo-introduction","text":"The results of this project were defined by several intended outcomes . A large contribution to these outcome manifests itself in the form of a working demonstrator. This section will act as a guide for this demo, as it consists of multiple separate components interacting to complete a scenario. Info This introduction and scenario will talk about the demonstrator that can be run locally on your machine. However there are also public hosted versions of these demo components, which you can find here: Solid Accountant : configure Web Monetization wallet into a Solid identity. Solid MicroStore : prototypical Web Monetized Solid application. Solid WMP : Web Monetization Provider with a fake currency.","title":"Demo introduction"},{"location":"demo/intro/#purpose-of-the-demo","text":"The demo hosts a couple of components, that come into play when a content-creator is hosting web monetized content that visiting users pay for through micropayments. These micropayments are sent over the interledger network from the visting users wallet to the content creators wallet. Aligning with Solid's vision, all required data is stored in the visiting user's Solid pod. Our demonstrator and the use of its various components is driven by the effort to further decentralize the web. The Web Monetization Provider component was introduced to further facilitate this decentralization. This demo will allow you to log in to your personal Solid pod and register a personal payment pointer . Afterwards you can subscribe to the Web Monetization Provider , that will manage micropayments on your behalf (with the chosen payment pointer ). The Microstore component can then be visited to showcase how (once logged in with your Solid WebID) the registered WMP can be requested from your Solid WebID and instructed to pay micropayments to the content provider's payment pointer embedded in the web page.","title":"Purpose of the demo"},{"location":"demo/intro/#setup","text":"The whole demonstrator can be set up and executed locally.","title":"Setup"},{"location":"demo/intro/#prerequisites","text":"","title":"Prerequisites"},{"location":"demo/intro/#docker","text":"You will need a working docker installation. We recommend installing Docker Desktop . It should also include a Docker Compose install. (which installs by default with Docker Desktop).","title":"Docker"},{"location":"demo/intro/#git","text":"A basic git installation will be required, just to be able to clone the repository on your local pc.","title":"Git"},{"location":"demo/intro/#solid-pod","text":"As a limitation of this demonstrator, not all components work with just any Solid pod. It is however not a technical limitation. To successfully go through the demonstrator, the user wil have to create an account and pod at solidcommunity.net .","title":"Solid pod"},{"location":"demo/intro/#running","text":"To run this setup, you just have to clone the repository locally and then execute the docker compose file from the cloned folder. git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization.git cd solid-web-monetization docker compose up -d This will start all demo components on your pc. Component URL Description Accountant http://wallet.localhost Allows you to edit your payment pointers stored in your WebID (on your Solid pod). Web Monetization Provider http://wmp.localhost Allows you to register the WMP in your WebID (on your Solid pod) and setup a subscription to pay the WMP . Microstore http://store.localhost Website of the content creator that has unlockable monetized content for users logged in with WebID. Docs http://docs.localhost These docs are also hosted locally on your pc now. Info If you want a more detailed explanation, you can follow the demo scenario .","title":"Running"},{"location":"demo/intro/#docker-composeyml","text":"The docker-compose.yml file that is being used has quite a few services that are worth explaining: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 version : '3.9' services : # Docs service mkdocs : image : squidfunk/mkdocs-material container_name : mkdocs ports : - 8888:8000 volumes : - type : bind source : ./.docs target : /docs labels : - \"traefik.enable=true\" # Let traefik pick this up - \"traefik.http.routers.docs.rule=Host(`docs.localhost`)\" # Route docs.localhost - \"traefik.http.routers.docs.entrypoints=web\" # Accountant application wallet : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/accountant:latest pull_policy : always container_name : wallet labels : - \"traefik.enable=true\" # Let traefik pick this up - \"traefik.http.routers.wallet.rule=Host(`wallet.localhost`)\" # Route wallet.localhost - \"traefik.http.routers.wallet.entrypoints=web\" # Microstore application store : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/microstore:latest pull_policy : always container_name : store labels : - \"traefik.enable=true\" # Let traefik pick this up - \"traefik.http.routers.store.rule=Host(`store.localhost`)\" # Route store.localhost - \"traefik.http.routers.store.entrypoints=web\" environment : - \"PAYMENT_POINTER=$$rafiki.money/p/thomas.dupont@ugent.be\" # Paymentpointer of content creator - \"CONFIG_VARS=PAYMENT_POINTER\" # Variables to expose to the app - \"CONFIG_FILE_PATH=/app/assets\" # Path of the config file - \"CONFIG_FILE_NAME=config.json\" # Name of the config file # Web Monetization Provider wmp : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/wmp:latest pull_policy : always container_name : wmp expose : - \"8080\" labels : - \"traefik.enable=true\" # Let traefik pick this up - \"traefik.http.routers.wmp.rule=Host(`wmp.localhost`)\" # Route wmp.localhost - \"traefik.http.routers.wmp.entrypoints=web\" environment : - \"BASE_URI=http://wmp.localhost\" # Uri to register/write in the pod - \"MONGO_CONNECTION_STRING=mongodb://mongodb:27017\" # The database connection string - \"CLIENT_ID=79e3648fc184f70306e4072f3a856bb1\" # The client ID (see docs) - \"CLIENT_SECRET=2ba10ec24a3cb231ee39781bc3882d66\" # The client secret (see docs) # Backing database for the WMP mongodb : image : mongo:4.2 container_name : mongodb ports : - \"27017:27017\" volumes : - 'mongodb_data:/data/db' # Traefik proxy (allows for ***.localhost routing of components) traefik : image : \"traefik:v2.6\" container_name : \"traefik\" command : # - \"--log.level=DEBUG\" - \"--api.insecure=true\" - \"--providers.docker=true\" - \"--providers.docker.exposedbydefault=false\" - \"--entrypoints.web.address=:80\" ports : - \"80:80\" - \"8080:8080\" volumes : - \"/var/run/docker.sock:/var/run/docker.sock:ro\" volumes : mongodb_data : driver : local","title":"docker-compose.yml"},{"location":"demo/scenario/","text":"Demo scenario \u00b6 This is a step-by-step guide through the demo scenario. 1. Setup \u00b6 As explained in the introduction , you will need docker and git installed on you local pc. 1.1 Create a content owner wallet \u00b6 The content creator will need a wallet account. For that we are going to create an account on Rafiki Money . Click SINGUP Enter an email and a password (the email will be part of the payment pointer address) Login with the new account On the overview page you will see two important parts. The Payment Pointer, which you can copy and store for the next step. The Monetization box, which you will see increase later in the demonstrator. 1.2 Set environment variables \u00b6 We will need to enter the Rafiki payment pointer from the previous step as an environment variable in the microstore service, so that it can be added in the appropriate meta tag of the HTML. Clone the repository git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization.git . cd solid-web-monetization Edit the docker-compose.yml file in the root folder. docker-compose.yml 27 28 29 30 31 32 33 34 35 36 37 38 39 store : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/microstore:latest pull_policy : always container_name : store labels : - \"traefik.enable=true\" - \"traefik.http.routers.store.rule=Host(`store.localhost`)\" - \"traefik.http.routers.store.entrypoints=web\" environment : - \"PAYMENT_POINTER=$$rafiki.money/p/your@email.com\" # (1) - \"CONFIG_VARS=PAYMENT_POINTER\" - \"CONFIG_FILE_PATH=/app/assets\" - \"CONFIG_FILE_NAME=config.json\" Don't forget to escape the $ sign by typing $$ ! 1.4 Register WMP as client (optional) \u00b6 This step is optional and only needed if you will run the components in the docker-compose.yml file on other endpoints/ports etc. If so, you will be required to first follow the steps in the practical section of the WMP . The resulting client_id and client_secret can be added in the docker-compose.yml file here: docker-compose.yml 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 wmp : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/wmp:latest pull_policy : always container_name : wmp expose : - \"8080\" labels : - \"traefik.enable=true\" - \"traefik.http.routers.wmp.rule=Host(`wmp.localhost`)\" - \"traefik.http.routers.wmp.entrypoints=web\" environment : - \"BASE_URI=http://wmp.localhost\" - \"MONGO_CONNECTION_STRING=mongodb://mongodb:27017\" - \"REDIRECT_URI=http://wmp.localhost/auth/cb\" - \"REDIRECT_URI_POST_LOGOUT=http://wmp.localhost/auth/logout/cb\" - \"CLIENT_ID=79e3648fc184f70306e4072f3a856bb1\" - \"CLIENT_SECRET=2ba10ec24a3cb231ee39781bc3882d66\" 1.3 Start services \u00b6 Now we can finally start all services! cd solid-web-monetization # cd into the root repository folder docker compose up -d # start all services in docker-compose.yml file in detached mode This will start all demo components on your pc. Component URL Description Accountant http://wallet.localhost Allows you to edit your payment pointers stored in your WebID (on your Solid pod). Web Monetization Provider http://wmp.localhost Allows you to register the WMP in your WebID (on your Solid pod) and setup a subscription to pay the WMP . Microstore http://store.localhost Website of the content creator that have unlockable monetized content for users logged in with WebID. Docs http://docs.localhost These docs are also hosted locally on your pc now. 2. Create your Solid Pod \u00b6 For this demo you will need your own Solid pod. Since this demonstrator is hardwired to https://solidcommunity.net , that is where we will register our pod. Click Register to get a Pod on the top right of the page . Fill out the form and press Register . You should now be able to login, and see your WebID URI, it will be of the form https://<username>.solidcommunity.net/profile/card#me 3. Add your payment pointer (accountant app) \u00b6 Normally you would have a wallet account somewhere with a payment pointer address. To be able to pay for monetized Solid apps, you will now register that payment pointer in your WebID. We will just add an example paymnet pointer address. Internally the WMP will be funded through other payments. (More in step 4 ) Important The part where the user pays the WMP from his/her wallet is still mocked. It seemed impossible to do a pure browser based STREAM payment from a payment pointer at this stage, because of the limitations outlined in the specification . Now we will use the Accountant application to add a payment pointer to your Solid pod. 3.1 Login \u00b6 Browse to http://wallet.localhost Press Login on the top right. Pick the solidcommynity.net box Follow the redirect and log in there with your newly created pod account 3.2 Add payment pointers \u00b6 Once back in the application, open the Payment pointers page. Now enter an example payment pointer $example.my.pointer in the form and click Add . It will be listed once added . You can see the entry in your WebID profile output too: @prefix : <#> . @prefix foaf: <http://xmlns.com/foaf/0.1/> . @prefix schema: <http://schema.org/> . @prefix n: <https://paymentpointers.org/ns#> . : me a schema : Person , foaf : Person ; n : hasPaymentPointer : me-paymentpointer-1 ; : me-paymentpointer-1 a n : InterledgerPaymentPointer ; n : paymentPointerValue \"$example.my.pointer\" . If you wish you can add multiple pointers, this will allow you to choose between them in your WMP subscription later. 4. Subscribe to the WMP \u00b6 We will now subscribe with the WMP application. The idea is that we subscribe and pay a monthly fee for the service. The WMP on their part will send micropayments to any web-monetized content we browse, while logged in with our WebID. Warning This demonstrator works over an interledger testnet . This means all funds are fake and nothing of monetary value is being sent right now. 4.1 Login \u00b6 Browse to https://wmp.localhost Click Login with WebID on the top right. You will probably not notice the redirect, since you are still logged in from before. If not, please login now. 4.2 Subscribe \u00b6 Open the Manage page. Your registered payment pointers are now read from your WebID profile document. Select one of your registered payment pointer and click Subscribe with WebID . Two things now happen: This WMP is written to your WebID Profile for later use. A Mandate is set up following the Open Payments specification draft. This allows the WMP to claim Charges from your chosen payment pointer (and the wallet behind it). Info Since no wallets were found that already implement the Open Payments specification draft, this part is mocked. The WMP will instead use generated accounts on ILPv4 Testnet Faucet , to generate temporary accounts with fake funds, and transfer money over the ILP testnet from there. The page now shows detail on the subscription. You can see the entry in your WebID profile output too: @prefix : <#> . @prefix foaf: <http://xmlns.com/foaf/0.1/> . @prefix schema: <http://schema.org/> . @prefix ns0: <https://webmonetization.org/ns#> . : me a schema : Person , foaf : Person ; ns0 : hasProvider : me-webmonetization-provider ; : me-webmonetization-provider a ns0 : Provider ; ns0 : apiUrl \"http://wmp.localhost\" . 5. Browse to the microstore app \u00b6 The only thing left to do now is to browse to the Microstore application to view some monetized content. Browse to http://store.localhost Open the subpages while logged out. Paywall: This example has a large paywall in front of the content. Mixed content: This example has some locked premium content in between the viewable images. 5.1 Login \u00b6 Click Login with WebID on the top right. 5.2 Open subpage paywall \u00b6 Open the Paywall page. Now that you are logged in, the button to unlock the content is shown. Click Unlock through Web Monetization . The paywall is hidden. The state of the counter up top goes from pending to 0 Once the first payment goes through, the counter is updated. Now open a new screen and browse to https://rafiki.money/login Log in with the content creator account from step 1.2 Watch as the Monetization box gets updated, while the paywall page is open. 5.3 Open subpage mixed content \u00b6 Open the Mixed content page. Now that you are logged in, this page automatically show the premium content (by hiding the locked banners). The state of the counter up top goes from pending to 0 Once the first payment goes through, the counter is updated. Now open a new screen and browse to https://rafiki.money/login Log in with the content creator account from step 1.2 Watch as the Monetization box gets updated, while the mixed content page is open. 5.4 Active session in WMP \u00b6 In the WMP you can also see that a session is active. Browse to http://wmp.localhost Login if not logged in Open the Manage page Scroll to the end to the Active sessions section This concludes the demonstrator scenario.","title":"Scenario"},{"location":"demo/scenario/#demo-scenario","text":"This is a step-by-step guide through the demo scenario.","title":"Demo scenario"},{"location":"demo/scenario/#1-setup","text":"As explained in the introduction , you will need docker and git installed on you local pc.","title":"1. Setup"},{"location":"demo/scenario/#11-create-a-content-owner-wallet","text":"The content creator will need a wallet account. For that we are going to create an account on Rafiki Money . Click SINGUP Enter an email and a password (the email will be part of the payment pointer address) Login with the new account On the overview page you will see two important parts. The Payment Pointer, which you can copy and store for the next step. The Monetization box, which you will see increase later in the demonstrator.","title":"1.1 Create a content owner wallet"},{"location":"demo/scenario/#12-set-environment-variables","text":"We will need to enter the Rafiki payment pointer from the previous step as an environment variable in the microstore service, so that it can be added in the appropriate meta tag of the HTML. Clone the repository git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization.git . cd solid-web-monetization Edit the docker-compose.yml file in the root folder. docker-compose.yml 27 28 29 30 31 32 33 34 35 36 37 38 39 store : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/microstore:latest pull_policy : always container_name : store labels : - \"traefik.enable=true\" - \"traefik.http.routers.store.rule=Host(`store.localhost`)\" - \"traefik.http.routers.store.entrypoints=web\" environment : - \"PAYMENT_POINTER=$$rafiki.money/p/your@email.com\" # (1) - \"CONFIG_VARS=PAYMENT_POINTER\" - \"CONFIG_FILE_PATH=/app/assets\" - \"CONFIG_FILE_NAME=config.json\" Don't forget to escape the $ sign by typing $$ !","title":"1.2 Set environment variables"},{"location":"demo/scenario/#14-register-wmp-as-client-optional","text":"This step is optional and only needed if you will run the components in the docker-compose.yml file on other endpoints/ports etc. If so, you will be required to first follow the steps in the practical section of the WMP . The resulting client_id and client_secret can be added in the docker-compose.yml file here: docker-compose.yml 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 wmp : image : ghcr.io/knowledgeonwebscale/solid-web-monetization/wmp:latest pull_policy : always container_name : wmp expose : - \"8080\" labels : - \"traefik.enable=true\" - \"traefik.http.routers.wmp.rule=Host(`wmp.localhost`)\" - \"traefik.http.routers.wmp.entrypoints=web\" environment : - \"BASE_URI=http://wmp.localhost\" - \"MONGO_CONNECTION_STRING=mongodb://mongodb:27017\" - \"REDIRECT_URI=http://wmp.localhost/auth/cb\" - \"REDIRECT_URI_POST_LOGOUT=http://wmp.localhost/auth/logout/cb\" - \"CLIENT_ID=79e3648fc184f70306e4072f3a856bb1\" - \"CLIENT_SECRET=2ba10ec24a3cb231ee39781bc3882d66\"","title":"1.4 Register WMP as client (optional)"},{"location":"demo/scenario/#13-start-services","text":"Now we can finally start all services! cd solid-web-monetization # cd into the root repository folder docker compose up -d # start all services in docker-compose.yml file in detached mode This will start all demo components on your pc. Component URL Description Accountant http://wallet.localhost Allows you to edit your payment pointers stored in your WebID (on your Solid pod). Web Monetization Provider http://wmp.localhost Allows you to register the WMP in your WebID (on your Solid pod) and setup a subscription to pay the WMP . Microstore http://store.localhost Website of the content creator that have unlockable monetized content for users logged in with WebID. Docs http://docs.localhost These docs are also hosted locally on your pc now.","title":"1.3 Start services"},{"location":"demo/scenario/#2-create-your-solid-pod","text":"For this demo you will need your own Solid pod. Since this demonstrator is hardwired to https://solidcommunity.net , that is where we will register our pod. Click Register to get a Pod on the top right of the page . Fill out the form and press Register . You should now be able to login, and see your WebID URI, it will be of the form https://<username>.solidcommunity.net/profile/card#me","title":"2. Create your Solid Pod"},{"location":"demo/scenario/#3-add-your-payment-pointer-accountant-app","text":"Normally you would have a wallet account somewhere with a payment pointer address. To be able to pay for monetized Solid apps, you will now register that payment pointer in your WebID. We will just add an example paymnet pointer address. Internally the WMP will be funded through other payments. (More in step 4 ) Important The part where the user pays the WMP from his/her wallet is still mocked. It seemed impossible to do a pure browser based STREAM payment from a payment pointer at this stage, because of the limitations outlined in the specification . Now we will use the Accountant application to add a payment pointer to your Solid pod.","title":"3. Add your payment pointer (accountant app)"},{"location":"demo/scenario/#31-login","text":"Browse to http://wallet.localhost Press Login on the top right. Pick the solidcommynity.net box Follow the redirect and log in there with your newly created pod account","title":"3.1 Login"},{"location":"demo/scenario/#32-add-payment-pointers","text":"Once back in the application, open the Payment pointers page. Now enter an example payment pointer $example.my.pointer in the form and click Add . It will be listed once added . You can see the entry in your WebID profile output too: @prefix : <#> . @prefix foaf: <http://xmlns.com/foaf/0.1/> . @prefix schema: <http://schema.org/> . @prefix n: <https://paymentpointers.org/ns#> . : me a schema : Person , foaf : Person ; n : hasPaymentPointer : me-paymentpointer-1 ; : me-paymentpointer-1 a n : InterledgerPaymentPointer ; n : paymentPointerValue \"$example.my.pointer\" . If you wish you can add multiple pointers, this will allow you to choose between them in your WMP subscription later.","title":"3.2 Add payment pointers"},{"location":"demo/scenario/#4-subscribe-to-the-wmp","text":"We will now subscribe with the WMP application. The idea is that we subscribe and pay a monthly fee for the service. The WMP on their part will send micropayments to any web-monetized content we browse, while logged in with our WebID. Warning This demonstrator works over an interledger testnet . This means all funds are fake and nothing of monetary value is being sent right now.","title":"4. Subscribe to the WMP"},{"location":"demo/scenario/#41-login","text":"Browse to https://wmp.localhost Click Login with WebID on the top right. You will probably not notice the redirect, since you are still logged in from before. If not, please login now.","title":"4.1 Login"},{"location":"demo/scenario/#42-subscribe","text":"Open the Manage page. Your registered payment pointers are now read from your WebID profile document. Select one of your registered payment pointer and click Subscribe with WebID . Two things now happen: This WMP is written to your WebID Profile for later use. A Mandate is set up following the Open Payments specification draft. This allows the WMP to claim Charges from your chosen payment pointer (and the wallet behind it). Info Since no wallets were found that already implement the Open Payments specification draft, this part is mocked. The WMP will instead use generated accounts on ILPv4 Testnet Faucet , to generate temporary accounts with fake funds, and transfer money over the ILP testnet from there. The page now shows detail on the subscription. You can see the entry in your WebID profile output too: @prefix : <#> . @prefix foaf: <http://xmlns.com/foaf/0.1/> . @prefix schema: <http://schema.org/> . @prefix ns0: <https://webmonetization.org/ns#> . : me a schema : Person , foaf : Person ; ns0 : hasProvider : me-webmonetization-provider ; : me-webmonetization-provider a ns0 : Provider ; ns0 : apiUrl \"http://wmp.localhost\" .","title":"4.2 Subscribe"},{"location":"demo/scenario/#5-browse-to-the-microstore-app","text":"The only thing left to do now is to browse to the Microstore application to view some monetized content. Browse to http://store.localhost Open the subpages while logged out. Paywall: This example has a large paywall in front of the content. Mixed content: This example has some locked premium content in between the viewable images.","title":"5. Browse to the microstore app"},{"location":"demo/scenario/#51-login","text":"Click Login with WebID on the top right.","title":"5.1 Login"},{"location":"demo/scenario/#52-open-subpage-paywall","text":"Open the Paywall page. Now that you are logged in, the button to unlock the content is shown. Click Unlock through Web Monetization . The paywall is hidden. The state of the counter up top goes from pending to 0 Once the first payment goes through, the counter is updated. Now open a new screen and browse to https://rafiki.money/login Log in with the content creator account from step 1.2 Watch as the Monetization box gets updated, while the paywall page is open.","title":"5.2 Open subpage paywall"},{"location":"demo/scenario/#53-open-subpage-mixed-content","text":"Open the Mixed content page. Now that you are logged in, this page automatically show the premium content (by hiding the locked banners). The state of the counter up top goes from pending to 0 Once the first payment goes through, the counter is updated. Now open a new screen and browse to https://rafiki.money/login Log in with the content creator account from step 1.2 Watch as the Monetization box gets updated, while the mixed content page is open.","title":"5.3 Open subpage mixed content"},{"location":"demo/scenario/#54-active-session-in-wmp","text":"In the WMP you can also see that a session is active. Browse to http://wmp.localhost Login if not logged in Open the Manage page Scroll to the end to the Active sessions section This concludes the demonstrator scenario.","title":"5.4 Active session in WMP"},{"location":"dissemination/","text":"Code \u00b6 All code is available on Github: https://github.com/KNowledgeOnWebScale/solid-web-monetization https://github.com/KNowledgeOnWebScale/solid-web-client Docker \u00b6 All services are available as docker images: Accountant: ghcr.io/knowledgeonwebscale/solid-web-monetization/accountant:latest Microstore: ghcr.io/knowledgeonwebscale/solid-web-monetization/microstore:latest Web Monetization Provider: ghcr.io/knowledgeonwebscale/solid-web-monetization/wmp:latest There is also docker-compose.yml file available: https://github.com/KNowledgeOnWebScale/solid-web-monetization/blob/master/docker-compose.yml Npm \u00b6 The JS/TS library solid-wmp-client is published on npm . The API is hosted at the github pages . Papers \u00b6 Solid Web Monetization [publication] [preprint pdf]","title":"Dissemination"},{"location":"dissemination/#code","text":"All code is available on Github: https://github.com/KNowledgeOnWebScale/solid-web-monetization https://github.com/KNowledgeOnWebScale/solid-web-client","title":"Code"},{"location":"dissemination/#docker","text":"All services are available as docker images: Accountant: ghcr.io/knowledgeonwebscale/solid-web-monetization/accountant:latest Microstore: ghcr.io/knowledgeonwebscale/solid-web-monetization/microstore:latest Web Monetization Provider: ghcr.io/knowledgeonwebscale/solid-web-monetization/wmp:latest There is also docker-compose.yml file available: https://github.com/KNowledgeOnWebScale/solid-web-monetization/blob/master/docker-compose.yml","title":"Docker"},{"location":"dissemination/#npm","text":"The JS/TS library solid-wmp-client is published on npm . The API is hosted at the github pages .","title":"Npm"},{"location":"dissemination/#papers","text":"Solid Web Monetization [publication] [preprint pdf]","title":"Papers"},{"location":"microstore/","text":"Solid Microstore \u00b6 The Solid Microstore app is an example of a content creator's website. It hosts a simple <meta name=\"monetization\" content=\"$example.paymentpointer.com\"> tag.","title":"Solid Microstore"},{"location":"microstore/#solid-microstore","text":"The Solid Microstore app is an example of a content creator's website. It hosts a simple <meta name=\"monetization\" content=\"$example.paymentpointer.com\"> tag.","title":"Solid Microstore"},{"location":"microstore/practical/","text":"Solid Microstore - Practical \u00b6 Purpose \u00b6 The purpose of this application is to demonstrate being a content creator that wants to monetize its content. This is done by including a simple HTML meta tag on the page. This tag can be present in the static HTML file or it can be added dynamically after the page has loaded. In this example it will be added dynamically. This meta tag will contain the payment pointer of the content owner. It will allow for visitors to know where to send micropayments to. Important In theory this would be all that is required. For now however some javascript code has to be included on the page too. This code is mainly encapsulated in the Web Monetization Provider Client library . In the future however it could be integrated in the Solid authentication process, which in turn could even be handled by the visiting user's browser agent by means of an extension. Usage \u00b6 To use this application you simply browse the two example use case pages. You will see that without being logged in to your Solid WebID, the monetized content will not be shown/unlocked. Once you are logged in, you will be able to view all the content. Docker \u00b6 The Microstore application can be started via Docker Compose: Clone the repository: git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization Open the root repository folder, where the docker-compose.yml file is located: cd solid-web-monetization Execute docker-compose up -d Browse to http://store.localhost Environment variables \u00b6 Under the store.environment section in the docker-compose.yml file, you can set the following environment variables. name default description PAYMENT_POINTER $$rafiki.money/p/thomas.dupont@ugent.be This is the payment pointer of the content creater/owner. (Double $$ is needed to escape the single $ ) CONFIG_VARS PAYMENT_POINTER Don't change this! This is needed to setup the PAYMENT_POINTER variable in the microstore application. CONFIG_FILE_PATH /app/assets Don't change this! This is needed to setup the PAYMENT_POINTER variable in the microstore application. CONFIG_FILE_NAME config.json Don't change this! This is needed to setup the PAYMENT_POINTER variable in the microstore application. Login \u00b6 Although in theory it should not matter which Solid pod and thus Solid WebID you use, this demonstrator has been hardwired to authenticate with solidcommunity.net . So you will need an account and pod there. That is why you should create a solid pod over at solidcommunity.net , if you did not so already. Paywall page \u00b6 This page demonstrates the typical use case of a paywall. Without paying, you cannot view anything on the page, since it is locked behind a paywall. Once logged in, the Web Monetization Provider URL will be read from the WebID of the user. The solid-wmp-client library can than be used to initiate micropayments to the payment pointer of the content creator. Warning In this case the content is hidden in client-side code. This means that with some DOM manipulation you can still see the content. It is only meant for demonstration purposes though. If you would do this properly, you should only load the actual content from the server, once payments arrive. Mixed content page \u00b6 This page demonstrates a use case where normal content is interleaved with premium content. Without logging in, you will see that the premium content has locked banners on top of it, once logged in and payment started through the solid-wmp-client library , the banners are removed and the premium content is viewable. Info This use case is equivalent to a use case where advertisement banners in between content, can be removed once payment has started. Counter \u00b6 On the top right of the application is the counter. This acts as a visualization of the messaging once the payment is set up. Messages are being sent over a websocket from the WMP back to the client. This counter shows state or transferred funds. Meta tag \u00b6 The meta tag that contains the content creator's payment pointer is described in the Web Monetization Specification Draft . As with any meta tag, it should be in the header section of the HTML page. <!-- Example meta tag --> < meta name = \"monetization\" content = \"$wallet.example.com/alice\" >","title":"Practical"},{"location":"microstore/practical/#solid-microstore-practical","text":"","title":"Solid Microstore - Practical"},{"location":"microstore/practical/#purpose","text":"The purpose of this application is to demonstrate being a content creator that wants to monetize its content. This is done by including a simple HTML meta tag on the page. This tag can be present in the static HTML file or it can be added dynamically after the page has loaded. In this example it will be added dynamically. This meta tag will contain the payment pointer of the content owner. It will allow for visitors to know where to send micropayments to. Important In theory this would be all that is required. For now however some javascript code has to be included on the page too. This code is mainly encapsulated in the Web Monetization Provider Client library . In the future however it could be integrated in the Solid authentication process, which in turn could even be handled by the visiting user's browser agent by means of an extension.","title":"Purpose"},{"location":"microstore/practical/#usage","text":"To use this application you simply browse the two example use case pages. You will see that without being logged in to your Solid WebID, the monetized content will not be shown/unlocked. Once you are logged in, you will be able to view all the content.","title":"Usage"},{"location":"microstore/practical/#docker","text":"The Microstore application can be started via Docker Compose: Clone the repository: git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization Open the root repository folder, where the docker-compose.yml file is located: cd solid-web-monetization Execute docker-compose up -d Browse to http://store.localhost","title":"Docker"},{"location":"microstore/practical/#environment-variables","text":"Under the store.environment section in the docker-compose.yml file, you can set the following environment variables. name default description PAYMENT_POINTER $$rafiki.money/p/thomas.dupont@ugent.be This is the payment pointer of the content creater/owner. (Double $$ is needed to escape the single $ ) CONFIG_VARS PAYMENT_POINTER Don't change this! This is needed to setup the PAYMENT_POINTER variable in the microstore application. CONFIG_FILE_PATH /app/assets Don't change this! This is needed to setup the PAYMENT_POINTER variable in the microstore application. CONFIG_FILE_NAME config.json Don't change this! This is needed to setup the PAYMENT_POINTER variable in the microstore application.","title":"Environment variables"},{"location":"microstore/practical/#login","text":"Although in theory it should not matter which Solid pod and thus Solid WebID you use, this demonstrator has been hardwired to authenticate with solidcommunity.net . So you will need an account and pod there. That is why you should create a solid pod over at solidcommunity.net , if you did not so already.","title":"Login"},{"location":"microstore/practical/#paywall-page","text":"This page demonstrates the typical use case of a paywall. Without paying, you cannot view anything on the page, since it is locked behind a paywall. Once logged in, the Web Monetization Provider URL will be read from the WebID of the user. The solid-wmp-client library can than be used to initiate micropayments to the payment pointer of the content creator. Warning In this case the content is hidden in client-side code. This means that with some DOM manipulation you can still see the content. It is only meant for demonstration purposes though. If you would do this properly, you should only load the actual content from the server, once payments arrive.","title":"Paywall page"},{"location":"microstore/practical/#mixed-content-page","text":"This page demonstrates a use case where normal content is interleaved with premium content. Without logging in, you will see that the premium content has locked banners on top of it, once logged in and payment started through the solid-wmp-client library , the banners are removed and the premium content is viewable. Info This use case is equivalent to a use case where advertisement banners in between content, can be removed once payment has started.","title":"Mixed content page"},{"location":"microstore/practical/#counter","text":"On the top right of the application is the counter. This acts as a visualization of the messaging once the payment is set up. Messages are being sent over a websocket from the WMP back to the client. This counter shows state or transferred funds.","title":"Counter"},{"location":"microstore/practical/#meta-tag","text":"The meta tag that contains the content creator's payment pointer is described in the Web Monetization Specification Draft . As with any meta tag, it should be in the header section of the HTML page. <!-- Example meta tag --> < meta name = \"monetization\" content = \"$wallet.example.com/alice\" >","title":"Meta tag"},{"location":"microstore/technical/","text":"Solid Microstore - Technical \u00b6 This information is meant for developers looking at the code of the Microstore application. Stack \u00b6 Framework \u00b6 The application is written in Angular 13.x.x and thus in TypeScript. It is written as a browser application. Package manager \u00b6 The yarn package manager was used. It behaves very similar to npm but is a bit faster and more modern in use. To install all libraries and build the code: run yarn from the project folder /solid-microstore . To run the code in a development server: execute yarn start from the project folder /solid-microstore . Libraries \u00b6 The noteworthy libraries used and the reason for doing so are listed below: library reason npm link n3 Implementation of the RDF .js low-level specification that lets you handle RDF . https://www.npmjs.com/package/n3 @inrupt/solid-client-authn-browser Authenticate web apps (in the browser) with Solid identity servers. https://www.npmjs.com/package/@inrupt/solid-client-authn-browser @inrupt/vocab-common-rdf Bundle of common RDF vocabularies. https://www.npmjs.com/package/@inrupt/vocab-common-rdf sockjs-client Counterpart of SockJS used on the server. it provides a WebSocket-like object. https://www.npmjs.com/package/sockjs-client solid-wmp-client Handles communication with a server component implementing the proposed WMP specification https://www.npmjs.com/package/solid-wmp-client web-monetization-polyfill Polyfill the Web Monetization JavaScript API on document.monetization, required until it is provided by browsers https://www.npmjs.com/package/web-monetization-polyfill Code notes \u00b6 Pages \u00b6 Angular works with components. Each subpage is a Component . Important for this demonstrator is that where possible, the standard Web Monetization Javascript API was used. Typically this amounts to registering event listeners to the document.monetization object and reacting to the fired events. Anything else noteworthy will be explained per page. About page \u00b6 /src/app/about Nothing special happens on this page. Paywall page \u00b6 /src/app/paywall constructor(...) \u00b6 On creation of this page, eventlisteners are added for all four MonetizationEvents , to not miss any events that are fired early on. The listeners manage the display of the paywall overlay. constructor (...) { // Setup listeners document . monetization ? . addEventListener ( 'monetizationstart' , evt => this . onStart ( evt )); document . monetization ? . addEventListener ( 'monetizationprogress' , evt => this . onProgress ( evt )); document . monetization ? . addEventListener ( 'monetizationstop' , evt => this . onStop ( evt )); document . monetization ? . addEventListener ( 'monetizationpending' , evt => this . onPending ( evt )); } unlock() \u00b6 The page starts with a locked paywall overlay that can be unlocked only when the user is logged in. For that the loggedIn property of the Auth service is checked. If that unlock button is clicked, the unlock() method is called. This will first call the WMP service to check whether monetization is supported. If so, the Solid service is called to fetch the stored WMP form the user's WebID . The URL of the WMP is then passed on to the WMP service to setup the payment. ngOnDestroy() \u00b6 There is an ngOnDestroy() method, this lifecycle hook gets called by the angular framework when the component is destroyed. In our case, since it is a full page, this happens when the user routes to another page. The code here calls the WMP service to close the current (if any) monetization stream. Mixed content page \u00b6 /src/app/mix constructor(...) \u00b6 On creation of this page, eventlisteners are added for two MonetizationEvents , to not miss any events that are fired early on. The listeners manage the display of the LOCKED labels. constructor (...) { // Setup listeners document . monetization ? . addEventListener ( 'monetizationstart' , _ => this . locked = false ); document . monetization ? . addEventListener ( 'monetizationstop' , _ => this . locked = true ); } ngOnInit() \u00b6 This lifecycle hook is called upon initialization of the page by the angular framework. Here two things happen: The Image service is being called to generate 100 random images. We subscribe to the statusChanged$ Subject property of the Auth service to do the following once the user is logged in: Request the Solid service to fetch the WMP URL from the WebID Profile document. Call the WMP service to set up the payment using that URL. ngOnDestroy() \u00b6 There is an ngOnDestroy() method, this lifecycle hook gets called by the angular framework when the component is destroyed. In our case, since it is a full page, this happens when the user routes to another page. The code here calls the WMP service to close the current (if any) monetization stream. Other components \u00b6 The leftover components are used as custom HTML Elements in the HTML. A component has HTML, CSS and code (typescript) associated with it. You can use a component in HTML by using an HTML tag to refer to it. <!-- Example tag --> < app-login-btn [ provider ]=\" p \" ></ app-login-btn > Navigation component \u00b6 /src/app/components/navigation This component just encapsulates the navigation bar on top. It provides a login butten and offloads the login() and logout() actions to the Auth service . Micropayment counter \u00b6 /src/app/components/counter This component encapsulates the logic to view the progress and status of the micropayments. constructor() \u00b6 On creation of this component, eventlisteners are added for all four MonetizationEvents , to not miss any events that are fired early on. The listeners manage the update of the counter view. constructor () { // Setup listeners document . monetization ? . addEventListener ( 'monetizationstart' , e => this . onStart ( e )); document . monetization ? . addEventListener ( 'monetizationprogress' , e => this . onProgress ( e )); document . monetization ? . addEventListener ( 'monetizationstop' , e => this . onStop ( e )); document . monetization ? . addEventListener ( 'monetizationpending' , e => this . onPending ( e )); } The code itself is well enough documented to figure out how this counter works. Services \u00b6 Services are singleton instances that are dependency injected into the components that list them as argument of their constructors. Auth service \u00b6 /src/app/services/auth.service.ts This service is mainly a wrapper around the @inrupt/solid-client-authn-browser library. handleIncomingCallback() \u00b6 This method calls two functions from the auth library that should be called when the browser is redirected to the application's callback URI. This method is called from inside the app.component.ts ngOnInit() hook, which is one of the first hook to be executed when the application loads. login() \u00b6 This calls the auth library's login() method but with a fixed value of http://solidcommunity.net . fetch property \u00b6 This returns the custom fetch() function of the auth library. Their security architecture does not allow for the access token to be exposed, that's why a custom fetch function is exposed that fills in the required Authorization and DPoP headers for you. Image service \u00b6 /src/app/services/image.service.ts This is a simple service that is able to consistently generate multiple generated images with randomly picked colors, interleaved with some premium images. Solid service \u00b6 /src/app/services/solid.service.ts This service contains the code to read from the WebID document on the solid pod of the user. It mainly uses the n3 library to read the Solid WebID profile and fetch the proper triples. The code itself is documented. WMP service \u00b6 /src/app/services/wmp.service.ts This service encapsulates the solid-wmp-client library. constructor(...) \u00b6 The constructor instantiates a WmpClient instance, assigns a variable wmHandler to the MonetizationHandler helper object and assigns a variable fetch to the custom fetch function from the Auth service . constructor ( auth : AuthService ) { this . wmp = new WmpClient (); this . wmHandler = this . wmp . getMonetizationHandler (); this . fetch = auth . fetch ; } setupWMPayment(...) \u00b6 This method instructs the wmp client instance to setup the payment from the WMP on the given wmpUrl using the given fetch function. Info On the API docs of the solid-wmp-client library you can read more about how this works . closeMonetizationStream() \u00b6 This methode will instruct the wmp client instance to close any open payment stream. App routing \u00b6 All app routing paths can be found in /src/app/app-routing.modules.ts WebID Profile \u00b6 The WebID profile is stored in RDF . That means that data read from that profile should be queried as RDF . To query a WebID Profile document for a WMP url, this tuple is being searched. https://[my-username].solidcommunity.net/profile/card#me @prefix : <#> . ... @prefix ns0: <https://webmonetization.org/ns#> . ... #me ... ns0 : hasProvider : me-webmonetization-provider . : me-webmonetization-provider a ns0 : Provider ; ns0 : apiUrl \"http://wmp.localhost\" . The actual query is performed by the Solid service library.","title":"Technical"},{"location":"microstore/technical/#solid-microstore-technical","text":"This information is meant for developers looking at the code of the Microstore application.","title":"Solid Microstore - Technical"},{"location":"microstore/technical/#stack","text":"","title":"Stack"},{"location":"microstore/technical/#framework","text":"The application is written in Angular 13.x.x and thus in TypeScript. It is written as a browser application.","title":"Framework"},{"location":"microstore/technical/#package-manager","text":"The yarn package manager was used. It behaves very similar to npm but is a bit faster and more modern in use. To install all libraries and build the code: run yarn from the project folder /solid-microstore . To run the code in a development server: execute yarn start from the project folder /solid-microstore .","title":"Package manager"},{"location":"microstore/technical/#libraries","text":"The noteworthy libraries used and the reason for doing so are listed below: library reason npm link n3 Implementation of the RDF .js low-level specification that lets you handle RDF . https://www.npmjs.com/package/n3 @inrupt/solid-client-authn-browser Authenticate web apps (in the browser) with Solid identity servers. https://www.npmjs.com/package/@inrupt/solid-client-authn-browser @inrupt/vocab-common-rdf Bundle of common RDF vocabularies. https://www.npmjs.com/package/@inrupt/vocab-common-rdf sockjs-client Counterpart of SockJS used on the server. it provides a WebSocket-like object. https://www.npmjs.com/package/sockjs-client solid-wmp-client Handles communication with a server component implementing the proposed WMP specification https://www.npmjs.com/package/solid-wmp-client web-monetization-polyfill Polyfill the Web Monetization JavaScript API on document.monetization, required until it is provided by browsers https://www.npmjs.com/package/web-monetization-polyfill","title":"Libraries"},{"location":"microstore/technical/#code-notes","text":"","title":"Code notes"},{"location":"microstore/technical/#pages","text":"Angular works with components. Each subpage is a Component . Important for this demonstrator is that where possible, the standard Web Monetization Javascript API was used. Typically this amounts to registering event listeners to the document.monetization object and reacting to the fired events. Anything else noteworthy will be explained per page.","title":"Pages"},{"location":"microstore/technical/#about-page","text":"/src/app/about Nothing special happens on this page.","title":"About page"},{"location":"microstore/technical/#paywall-page","text":"/src/app/paywall","title":"Paywall page"},{"location":"microstore/technical/#constructor","text":"On creation of this page, eventlisteners are added for all four MonetizationEvents , to not miss any events that are fired early on. The listeners manage the display of the paywall overlay. constructor (...) { // Setup listeners document . monetization ? . addEventListener ( 'monetizationstart' , evt => this . onStart ( evt )); document . monetization ? . addEventListener ( 'monetizationprogress' , evt => this . onProgress ( evt )); document . monetization ? . addEventListener ( 'monetizationstop' , evt => this . onStop ( evt )); document . monetization ? . addEventListener ( 'monetizationpending' , evt => this . onPending ( evt )); }","title":"constructor(...)"},{"location":"microstore/technical/#unlock","text":"The page starts with a locked paywall overlay that can be unlocked only when the user is logged in. For that the loggedIn property of the Auth service is checked. If that unlock button is clicked, the unlock() method is called. This will first call the WMP service to check whether monetization is supported. If so, the Solid service is called to fetch the stored WMP form the user's WebID . The URL of the WMP is then passed on to the WMP service to setup the payment.","title":"unlock()"},{"location":"microstore/technical/#ngondestroy","text":"There is an ngOnDestroy() method, this lifecycle hook gets called by the angular framework when the component is destroyed. In our case, since it is a full page, this happens when the user routes to another page. The code here calls the WMP service to close the current (if any) monetization stream.","title":"ngOnDestroy()"},{"location":"microstore/technical/#mixed-content-page","text":"/src/app/mix","title":"Mixed content page"},{"location":"microstore/technical/#constructor_1","text":"On creation of this page, eventlisteners are added for two MonetizationEvents , to not miss any events that are fired early on. The listeners manage the display of the LOCKED labels. constructor (...) { // Setup listeners document . monetization ? . addEventListener ( 'monetizationstart' , _ => this . locked = false ); document . monetization ? . addEventListener ( 'monetizationstop' , _ => this . locked = true ); }","title":"constructor(...)"},{"location":"microstore/technical/#ngoninit","text":"This lifecycle hook is called upon initialization of the page by the angular framework. Here two things happen: The Image service is being called to generate 100 random images. We subscribe to the statusChanged$ Subject property of the Auth service to do the following once the user is logged in: Request the Solid service to fetch the WMP URL from the WebID Profile document. Call the WMP service to set up the payment using that URL.","title":"ngOnInit()"},{"location":"microstore/technical/#ngondestroy_1","text":"There is an ngOnDestroy() method, this lifecycle hook gets called by the angular framework when the component is destroyed. In our case, since it is a full page, this happens when the user routes to another page. The code here calls the WMP service to close the current (if any) monetization stream.","title":"ngOnDestroy()"},{"location":"microstore/technical/#other-components","text":"The leftover components are used as custom HTML Elements in the HTML. A component has HTML, CSS and code (typescript) associated with it. You can use a component in HTML by using an HTML tag to refer to it. <!-- Example tag --> < app-login-btn [ provider ]=\" p \" ></ app-login-btn >","title":"Other components"},{"location":"microstore/technical/#navigation-component","text":"/src/app/components/navigation This component just encapsulates the navigation bar on top. It provides a login butten and offloads the login() and logout() actions to the Auth service .","title":"Navigation component"},{"location":"microstore/technical/#micropayment-counter","text":"/src/app/components/counter This component encapsulates the logic to view the progress and status of the micropayments.","title":"Micropayment counter"},{"location":"microstore/technical/#constructor_2","text":"On creation of this component, eventlisteners are added for all four MonetizationEvents , to not miss any events that are fired early on. The listeners manage the update of the counter view. constructor () { // Setup listeners document . monetization ? . addEventListener ( 'monetizationstart' , e => this . onStart ( e )); document . monetization ? . addEventListener ( 'monetizationprogress' , e => this . onProgress ( e )); document . monetization ? . addEventListener ( 'monetizationstop' , e => this . onStop ( e )); document . monetization ? . addEventListener ( 'monetizationpending' , e => this . onPending ( e )); } The code itself is well enough documented to figure out how this counter works.","title":"constructor()"},{"location":"microstore/technical/#services","text":"Services are singleton instances that are dependency injected into the components that list them as argument of their constructors.","title":"Services"},{"location":"microstore/technical/#auth-service","text":"/src/app/services/auth.service.ts This service is mainly a wrapper around the @inrupt/solid-client-authn-browser library.","title":"Auth service"},{"location":"microstore/technical/#handleincomingcallback","text":"This method calls two functions from the auth library that should be called when the browser is redirected to the application's callback URI. This method is called from inside the app.component.ts ngOnInit() hook, which is one of the first hook to be executed when the application loads.","title":"handleIncomingCallback()"},{"location":"microstore/technical/#login","text":"This calls the auth library's login() method but with a fixed value of http://solidcommunity.net .","title":"login()"},{"location":"microstore/technical/#fetch-property","text":"This returns the custom fetch() function of the auth library. Their security architecture does not allow for the access token to be exposed, that's why a custom fetch function is exposed that fills in the required Authorization and DPoP headers for you.","title":"fetch property"},{"location":"microstore/technical/#image-service","text":"/src/app/services/image.service.ts This is a simple service that is able to consistently generate multiple generated images with randomly picked colors, interleaved with some premium images.","title":"Image service"},{"location":"microstore/technical/#solid-service","text":"/src/app/services/solid.service.ts This service contains the code to read from the WebID document on the solid pod of the user. It mainly uses the n3 library to read the Solid WebID profile and fetch the proper triples. The code itself is documented.","title":"Solid service"},{"location":"microstore/technical/#wmp-service","text":"/src/app/services/wmp.service.ts This service encapsulates the solid-wmp-client library.","title":"WMP service"},{"location":"microstore/technical/#constructor_3","text":"The constructor instantiates a WmpClient instance, assigns a variable wmHandler to the MonetizationHandler helper object and assigns a variable fetch to the custom fetch function from the Auth service . constructor ( auth : AuthService ) { this . wmp = new WmpClient (); this . wmHandler = this . wmp . getMonetizationHandler (); this . fetch = auth . fetch ; }","title":"constructor(...)"},{"location":"microstore/technical/#setupwmpayment","text":"This method instructs the wmp client instance to setup the payment from the WMP on the given wmpUrl using the given fetch function. Info On the API docs of the solid-wmp-client library you can read more about how this works .","title":"setupWMPayment(...)"},{"location":"microstore/technical/#closemonetizationstream","text":"This methode will instruct the wmp client instance to close any open payment stream.","title":"closeMonetizationStream()"},{"location":"microstore/technical/#app-routing","text":"All app routing paths can be found in /src/app/app-routing.modules.ts","title":"App routing"},{"location":"microstore/technical/#webid-profile","text":"The WebID profile is stored in RDF . That means that data read from that profile should be queried as RDF . To query a WebID Profile document for a WMP url, this tuple is being searched. https://[my-username].solidcommunity.net/profile/card#me @prefix : <#> . ... @prefix ns0: <https://webmonetization.org/ns#> . ... #me ... ns0 : hasProvider : me-webmonetization-provider . : me-webmonetization-provider a ns0 : Provider ; ns0 : apiUrl \"http://wmp.localhost\" . The actual query is performed by the Solid service library.","title":"WebID Profile"},{"location":"wmp/","text":"Solid Web Monetization Provider \u00b6 The Solid Web Monetization Provider is an example of an intermediate party that performs micropayments to payment pointers on behalf of a user. That user trusts the WMP and has an active subscription with it.","title":"Solid Web Monetization Provider"},{"location":"wmp/#solid-web-monetization-provider","text":"The Solid Web Monetization Provider is an example of an intermediate party that performs micropayments to payment pointers on behalf of a user. That user trusts the WMP and has an active subscription with it.","title":"Solid Web Monetization Provider"},{"location":"wmp/client/","text":"solid-wmp-client library \u00b6 This is a client-side typescript/javascript library for interfacing with a server component that follows the Web Monetization Provider draft specification . The communication with this WMP server component has been abstracted in a separate library. API \u00b6 The API is fully documented and hosted at: https://knowledgeonwebscale.github.io/solid-wmp-client/ Links \u00b6 Github: https://github.com/KNowledgeOnWebScale/solid-wmp-client Npm: https://github.com/KNowledgeOnWebScale/solid-wmp-client","title":"Client Lib"},{"location":"wmp/client/#solid-wmp-client-library","text":"This is a client-side typescript/javascript library for interfacing with a server component that follows the Web Monetization Provider draft specification . The communication with this WMP server component has been abstracted in a separate library.","title":"solid-wmp-client library"},{"location":"wmp/client/#api","text":"The API is fully documented and hosted at: https://knowledgeonwebscale.github.io/solid-wmp-client/","title":"API"},{"location":"wmp/client/#links","text":"Github: https://github.com/KNowledgeOnWebScale/solid-wmp-client Npm: https://github.com/KNowledgeOnWebScale/solid-wmp-client","title":"Links"},{"location":"wmp/practical/","text":"Solid Web Monetization Provider - Practical \u00b6 Purpose \u00b6 The purpose of this component is to provide a minimal implementation of the proposed Solid Web Monetization provider . Usage \u00b6 Docker \u00b6 The WMP server can be started via Docker Compose: Clone the repository: git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization Open the root repository folder, where the docker-compose.yml file is located: cd solid-web-monetization Execute docker-compose up -d Browse to http://wmp.localhost Environment variables \u00b6 Under the wmp.environment section in the docker-compose.yml file, you can set the following environment variables. name default description HTTP_PORT HTTP port server is hosted on 8080 , BASE_URI URI as written in WebID Solid profile document \"http://localhost:$httpPort\" MONGO_CONNECTION_STRING Connection string to mongodb instance \"mongodb://localhost:27017\" MONGO_DATABASE_NAME Database name of mongodb database \"demo-wmp\" SUBSCRIPTION_AMOUNT Subscription amount deducted 5 (long) SUBSCRIPTION_ASSET_CODE Subscription assetCode \"USD\" SUBSCRIPTION_ASSET_SCALE Subscription assetScale 2 (int) SUBSCRIPTION_INTERVAL Subscription deduction interval \"P1M\" , IDP_URI_SOLID_COMMUNITY solidcommunity.net IDP configuration URI \"https://solidcommunity.net/.well-known/openid-configuration\" CLIENT_ID (*) solidcommunity.net clientId of WMP \"b8c75d654bfe324ccae44f1638d5310c\" CLIENT_SECRET (*) solidcommunity.net clientSecret of WMP \"899fb60c7f7c1b3e67abbaebcaf06904\" API_PATH Path under which API is hosted \"/api\" AUTH_PATH Path under which auth is hosted \"/auth\" (*) The WMP must be registered to the IDP solidcommunity.net through dynamic registration. The resulting JSON contains the required CLIENT_ID and CLIENT_SECRET . Client registration \u00b6 To register the WMP as client with solidcommunity.net execute the following statement, using the values as you set them for the environment variables. # HTTP POST to https://solidcommunity.net/register curl --location --request POST 'https://solidcommunity.net/register' \\ --header 'Content-Type: application/json' \\ --data-binary @- << EOF { \"client_name\": \"WMP\", \"application_type\": \"native\", \"subject_type\": \"public\", \"redirect_uris\": [ \"http://localhost:8080/auth/cb\", \"http://wmp.localhost/auth/cb\" ], \"post_logout_redirect_uris\": [ \"http://localhost:8080/auth/logout/cb\", \"http://wmp.localhost/auth/logout/cb\" ] } EOF You should receive something like this: { \"redirect_uris\" : [ \"http://localhost:8080/auth/cb\" , \"http://wmp.localhost/auth/cb\" ], \"client_id\" : \"******\" , \"client_secret\" : \"******\" , \"response_types\" : [ \"code\" ], \"grant_types\" : [ \"authorization_code\" ], \"application_type\" : \"native\" , \"client_name\" : \"WMP\" , \"subject_type\" : \"public\" , \"id_token_signed_response_alg\" : \"RS256\" , \"token_endpoint_auth_method\" : \"client_secret_basic\" , \"post_logout_redirect_uris\" : [ \"http://localhost:8080/auth/logout/cb\" , \"http://wmp.localhost/auth/logout/cb\" ], \"registration_access_token\" : \"eyJhbGciOiJSUzI1NiJ9.eyJpc3M...IyYmEifQ.ifK5xi45...gsUJex_GfXJg\" , \"registration_client_uri\" : \"https://solidcommunity.net/register/38f951e27363209239712c5a5e6122ba\" , \"client_id_issued_at\" : 1643387461 , \"client_secret_expires_at\" : 0 } You can now use those client_id and client_secret values to pass as environment variables to the server. They can be edited in the docker-compose.yml . Login \u00b6 Although in theory it should not matter which Solid pod and thus Solid WebID you use, this demonstrator has been hardwired to authenticate with solidcommunity.net . So you will need an account and pod there. That is why you should create a solid pod over at solidcommunity.net , if you did not so already. About page \u00b6 There is nothing noteworthy about this page. Once logged in, it outputs your Solid WebID Profile URI. Manage page \u00b6 If you do not have a subscription to this WMP yet, this page shows a form with all payment pointers found inside you WebID Profile document. If there aren't any listed, you have to use the Accountant application first. After selecting your preferred payment pointer and clicking Subscribe with WebID , your subscription is stored. Now that you have a subscripton all details should be shown. Along with your subscription a Mandate is now created at your payment pointers wallet following the Open Payments draft specification . Now your wallet is charged according to the environment variables set for the WMP server. This effectively funds the WMP to do payments on its user's behalf. Solid application \u00b6 Following the Solid ideology, the payment pointers are queried from the user's Solid pod and the user's WMP is stored in the user's Solid pod.","title":"Practical"},{"location":"wmp/practical/#solid-web-monetization-provider-practical","text":"","title":"Solid Web Monetization Provider - Practical"},{"location":"wmp/practical/#purpose","text":"The purpose of this component is to provide a minimal implementation of the proposed Solid Web Monetization provider .","title":"Purpose"},{"location":"wmp/practical/#usage","text":"","title":"Usage"},{"location":"wmp/practical/#docker","text":"The WMP server can be started via Docker Compose: Clone the repository: git clone https://github.com/KNowledgeOnWebScale/solid-web-monetization Open the root repository folder, where the docker-compose.yml file is located: cd solid-web-monetization Execute docker-compose up -d Browse to http://wmp.localhost","title":"Docker"},{"location":"wmp/practical/#environment-variables","text":"Under the wmp.environment section in the docker-compose.yml file, you can set the following environment variables. name default description HTTP_PORT HTTP port server is hosted on 8080 , BASE_URI URI as written in WebID Solid profile document \"http://localhost:$httpPort\" MONGO_CONNECTION_STRING Connection string to mongodb instance \"mongodb://localhost:27017\" MONGO_DATABASE_NAME Database name of mongodb database \"demo-wmp\" SUBSCRIPTION_AMOUNT Subscription amount deducted 5 (long) SUBSCRIPTION_ASSET_CODE Subscription assetCode \"USD\" SUBSCRIPTION_ASSET_SCALE Subscription assetScale 2 (int) SUBSCRIPTION_INTERVAL Subscription deduction interval \"P1M\" , IDP_URI_SOLID_COMMUNITY solidcommunity.net IDP configuration URI \"https://solidcommunity.net/.well-known/openid-configuration\" CLIENT_ID (*) solidcommunity.net clientId of WMP \"b8c75d654bfe324ccae44f1638d5310c\" CLIENT_SECRET (*) solidcommunity.net clientSecret of WMP \"899fb60c7f7c1b3e67abbaebcaf06904\" API_PATH Path under which API is hosted \"/api\" AUTH_PATH Path under which auth is hosted \"/auth\" (*) The WMP must be registered to the IDP solidcommunity.net through dynamic registration. The resulting JSON contains the required CLIENT_ID and CLIENT_SECRET .","title":"Environment variables"},{"location":"wmp/practical/#client-registration","text":"To register the WMP as client with solidcommunity.net execute the following statement, using the values as you set them for the environment variables. # HTTP POST to https://solidcommunity.net/register curl --location --request POST 'https://solidcommunity.net/register' \\ --header 'Content-Type: application/json' \\ --data-binary @- << EOF { \"client_name\": \"WMP\", \"application_type\": \"native\", \"subject_type\": \"public\", \"redirect_uris\": [ \"http://localhost:8080/auth/cb\", \"http://wmp.localhost/auth/cb\" ], \"post_logout_redirect_uris\": [ \"http://localhost:8080/auth/logout/cb\", \"http://wmp.localhost/auth/logout/cb\" ] } EOF You should receive something like this: { \"redirect_uris\" : [ \"http://localhost:8080/auth/cb\" , \"http://wmp.localhost/auth/cb\" ], \"client_id\" : \"******\" , \"client_secret\" : \"******\" , \"response_types\" : [ \"code\" ], \"grant_types\" : [ \"authorization_code\" ], \"application_type\" : \"native\" , \"client_name\" : \"WMP\" , \"subject_type\" : \"public\" , \"id_token_signed_response_alg\" : \"RS256\" , \"token_endpoint_auth_method\" : \"client_secret_basic\" , \"post_logout_redirect_uris\" : [ \"http://localhost:8080/auth/logout/cb\" , \"http://wmp.localhost/auth/logout/cb\" ], \"registration_access_token\" : \"eyJhbGciOiJSUzI1NiJ9.eyJpc3M...IyYmEifQ.ifK5xi45...gsUJex_GfXJg\" , \"registration_client_uri\" : \"https://solidcommunity.net/register/38f951e27363209239712c5a5e6122ba\" , \"client_id_issued_at\" : 1643387461 , \"client_secret_expires_at\" : 0 } You can now use those client_id and client_secret values to pass as environment variables to the server. They can be edited in the docker-compose.yml .","title":"Client registration"},{"location":"wmp/practical/#login","text":"Although in theory it should not matter which Solid pod and thus Solid WebID you use, this demonstrator has been hardwired to authenticate with solidcommunity.net . So you will need an account and pod there. That is why you should create a solid pod over at solidcommunity.net , if you did not so already.","title":"Login"},{"location":"wmp/practical/#about-page","text":"There is nothing noteworthy about this page. Once logged in, it outputs your Solid WebID Profile URI.","title":"About page"},{"location":"wmp/practical/#manage-page","text":"If you do not have a subscription to this WMP yet, this page shows a form with all payment pointers found inside you WebID Profile document. If there aren't any listed, you have to use the Accountant application first. After selecting your preferred payment pointer and clicking Subscribe with WebID , your subscription is stored. Now that you have a subscripton all details should be shown. Along with your subscription a Mandate is now created at your payment pointers wallet following the Open Payments draft specification . Now your wallet is charged according to the environment variables set for the WMP server. This effectively funds the WMP to do payments on its user's behalf.","title":"Manage page"},{"location":"wmp/practical/#solid-application","text":"Following the Solid ideology, the payment pointers are queried from the user's Solid pod and the user's WMP is stored in the user's Solid pod.","title":"Solid application"},{"location":"wmp/technical/","text":"Solid Web Monetization Provider - Technical \u00b6 Stack \u00b6 Framework \u00b6 The WMP Proof of Concept is written in Kotlin 1.6.10 on top of JDK 16. The Vert.x toolkit is used as a Web/Micro-service framework (Vert.x can be compared to Node.js). Project setup \u00b6 Maven was used for describing the project dependencies, managing builds and generating the Docker image. To install all dependencies and compile the project: run mvn compile from the project folder /solid-wmp . To generate a Docker image: Override the details for the to image repository of the Jib plugin in the file /solid-wmp/pom.xml Run mvn package from the project folder /solid-wmp . Libraries \u00b6 Next to the framework related dependencies, the following additional libraries were used: library reason project link Feather Dependency injection framework, makes it easy to extend or replace specific implementation modules https://github.com/zsoltherpai/feather Apache Jena Framework for building Semantic Web and Linked Data applications https://jena.apache.org Extending the Proof of Concept \u00b6 This Proof of Concept implementation can be used as a starting point for the development of a fully functional Solid Web Monetization Provider . Our implementation uses clearly defined interfaces for the various integration points ( Open Payments interfacing , Solid Pod , ILP ), making it easy to swap out the existing PoC implementation for a real implementation. The following sections give an overview of the changes required to get this PoC working for real-life use cases. Subscription Manager \u00b6 The Subscription Manager is defined by the interface SubscriptionManager . This component is responsible for the creation and cancellation of subscriptions and the interfacing with the Open Payments Mandates that are linked to the subscriptions. The Subscription Manager is the central component of the Web Monetization provider implementation. The following public interface methods need to be implemented: initSubscription : Initialize and try to activate a new subscription Create metadata for the new subscription Register this WMP with the Solid Pod of the authenticated user Create a Mandate on the Wallet of the authenticated user (using the Open Payments protocol ) getSubscription : Retrieve subscription metadata (optionally include information on the validity of the subscription, see validateSubscription ) stopSubscription : Cancels the subscription Remove any reference to this WMP from the Solid Pod of the authenticated user Delete the Mandate on the Wallet of the authenticated user (using the Open Payments protocol ) Delete the subscription metadata fetchMandate : Utility method to fetch the Mandate associated with a subscription validateSubscription Validate a subscription by checking if the Mandate still exists and has not been expired. In addition, for the Web Monetization Provider to be functional, the Subscription Manager should spawn one or multiple background processes that can act upon the Mandates associated with the registered subscriptions, by creating Charges using the Open Payments protocol (in order to generate funds for the Web Monetization provider operator). These processes are not implemented in this PoC, because at the time of writing there were no Wallet providers available in the ILP testnet that support the Open Payments specification . Checklist Add a class implementing the SubscriptionManager interface. (The current PoC implementation MongoSubscriptionManager uses MongoDB to store subscription metadata and provides mockup interactions via Open Payments). Make sure to add a background process that tracks active subscriptions and Charges the associated Mandates to generate funds. Activate the new implementation by updating the argument for IoCBindings.subscriptionManager . (This method should receive and return an instance of the new implementation class). ILP Stream Manager \u00b6 The ILP Stream Manager is defined by the interface ILPStreamManager . This component is responsible for performing the micro-transactions backed by an Interledger ( ILP ) network. The existing PoC implementation resolves the payments by performing HTTP requests to a test network ( https://faucet.ilpv4.dev ) using the ILP -over-HTTP protocol . This implementation should be replaced with a more advanced solution, backed by a production ILP network. For now, the interface ILPStreamManager only requires a single function to be implemented: fun streamMoney(target: PaymentPointer): Flowable<ILPStreamUpdate> : prepare a micro-transaction stream towards the provided payment pointer . The function must return a Flowable which can be used to activate and stop the stream, and allows listening for ILPStreamUpdate notifications. This class contains the amount and type of assets that were sent to the target, which is used by the WMP session API to communicate payment progress for a Web Monetization session to the clients (using a Websocket). Checklist Add a class implementing the ILPStreamManager interface. Activate the new implementation by updating the argument for IoCBindings.ilpStreamManager . Solid Pod Manager & AccessManager (optional) \u00b6 The Solid Pod Manager is defined by the interface SolidPodManager . This component is responsible for interfacing with the Solid Pods of the WMP users. Likewise, Access Manager is defined by the interface AccessManager , which is a component that handles authentication and authorization based on Solid WebIDs. The existing PoC implementations fulfill all the features required at this moment and are compatible with https://solidcommunity.net Solid pods. Replace or extend upon these implementations to make the WMP compatible with other Solid pod providers or to expand the authorization layer (e.g. say you want to include an administrator role for managing the subscriptions and monitoring the sessions).","title":"Technical"},{"location":"wmp/technical/#solid-web-monetization-provider-technical","text":"","title":"Solid Web Monetization Provider - Technical"},{"location":"wmp/technical/#stack","text":"","title":"Stack"},{"location":"wmp/technical/#framework","text":"The WMP Proof of Concept is written in Kotlin 1.6.10 on top of JDK 16. The Vert.x toolkit is used as a Web/Micro-service framework (Vert.x can be compared to Node.js).","title":"Framework"},{"location":"wmp/technical/#project-setup","text":"Maven was used for describing the project dependencies, managing builds and generating the Docker image. To install all dependencies and compile the project: run mvn compile from the project folder /solid-wmp . To generate a Docker image: Override the details for the to image repository of the Jib plugin in the file /solid-wmp/pom.xml Run mvn package from the project folder /solid-wmp .","title":"Project setup"},{"location":"wmp/technical/#libraries","text":"Next to the framework related dependencies, the following additional libraries were used: library reason project link Feather Dependency injection framework, makes it easy to extend or replace specific implementation modules https://github.com/zsoltherpai/feather Apache Jena Framework for building Semantic Web and Linked Data applications https://jena.apache.org","title":"Libraries"},{"location":"wmp/technical/#extending-the-proof-of-concept","text":"This Proof of Concept implementation can be used as a starting point for the development of a fully functional Solid Web Monetization Provider . Our implementation uses clearly defined interfaces for the various integration points ( Open Payments interfacing , Solid Pod , ILP ), making it easy to swap out the existing PoC implementation for a real implementation. The following sections give an overview of the changes required to get this PoC working for real-life use cases.","title":"Extending the Proof of Concept"},{"location":"wmp/technical/#subscription-manager","text":"The Subscription Manager is defined by the interface SubscriptionManager . This component is responsible for the creation and cancellation of subscriptions and the interfacing with the Open Payments Mandates that are linked to the subscriptions. The Subscription Manager is the central component of the Web Monetization provider implementation. The following public interface methods need to be implemented: initSubscription : Initialize and try to activate a new subscription Create metadata for the new subscription Register this WMP with the Solid Pod of the authenticated user Create a Mandate on the Wallet of the authenticated user (using the Open Payments protocol ) getSubscription : Retrieve subscription metadata (optionally include information on the validity of the subscription, see validateSubscription ) stopSubscription : Cancels the subscription Remove any reference to this WMP from the Solid Pod of the authenticated user Delete the Mandate on the Wallet of the authenticated user (using the Open Payments protocol ) Delete the subscription metadata fetchMandate : Utility method to fetch the Mandate associated with a subscription validateSubscription Validate a subscription by checking if the Mandate still exists and has not been expired. In addition, for the Web Monetization Provider to be functional, the Subscription Manager should spawn one or multiple background processes that can act upon the Mandates associated with the registered subscriptions, by creating Charges using the Open Payments protocol (in order to generate funds for the Web Monetization provider operator). These processes are not implemented in this PoC, because at the time of writing there were no Wallet providers available in the ILP testnet that support the Open Payments specification . Checklist Add a class implementing the SubscriptionManager interface. (The current PoC implementation MongoSubscriptionManager uses MongoDB to store subscription metadata and provides mockup interactions via Open Payments). Make sure to add a background process that tracks active subscriptions and Charges the associated Mandates to generate funds. Activate the new implementation by updating the argument for IoCBindings.subscriptionManager . (This method should receive and return an instance of the new implementation class).","title":"Subscription Manager"},{"location":"wmp/technical/#ilp-stream-manager","text":"The ILP Stream Manager is defined by the interface ILPStreamManager . This component is responsible for performing the micro-transactions backed by an Interledger ( ILP ) network. The existing PoC implementation resolves the payments by performing HTTP requests to a test network ( https://faucet.ilpv4.dev ) using the ILP -over-HTTP protocol . This implementation should be replaced with a more advanced solution, backed by a production ILP network. For now, the interface ILPStreamManager only requires a single function to be implemented: fun streamMoney(target: PaymentPointer): Flowable<ILPStreamUpdate> : prepare a micro-transaction stream towards the provided payment pointer . The function must return a Flowable which can be used to activate and stop the stream, and allows listening for ILPStreamUpdate notifications. This class contains the amount and type of assets that were sent to the target, which is used by the WMP session API to communicate payment progress for a Web Monetization session to the clients (using a Websocket). Checklist Add a class implementing the ILPStreamManager interface. Activate the new implementation by updating the argument for IoCBindings.ilpStreamManager .","title":"ILP Stream Manager"},{"location":"wmp/technical/#solid-pod-manager-accessmanager-optional","text":"The Solid Pod Manager is defined by the interface SolidPodManager . This component is responsible for interfacing with the Solid Pods of the WMP users. Likewise, Access Manager is defined by the interface AccessManager , which is a component that handles authentication and authorization based on Solid WebIDs. The existing PoC implementations fulfill all the features required at this moment and are compatible with https://solidcommunity.net Solid pods. Replace or extend upon these implementations to make the WMP compatible with other Solid pod providers or to expand the authorization layer (e.g. say you want to include an administrator role for managing the subscriptions and monitoring the sessions).","title":"Solid Pod Manager &amp; AccessManager (optional)"}]}